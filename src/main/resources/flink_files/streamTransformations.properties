Map = DataStream → DataStream	
#Takes one element and produces one element. A map function that doubles the values of the input stream:
#取一个元素，操作，输出一个元素
dataStream.map { x => x * 2 }

FlatMap = DataStream → DataStream	
#Takes one element and produces zero, one, or more elements. A flatmap function that splits sentences to words:
#取一个元素，输出0 1 或者多个元素，可以理解为拉平，如果不用flatmap而是用map的话，输出的应该是一个数组而不是多个独立的元素
dataStream.flatMap { str => str.split(" ") }

Filter = DataStream → DataStream	
#Evaluates a boolean function for each element and retains those for which the function returns true. A filter that filters out zero values:
#对一个元素执行function，如果结果为true就保留flase则丢弃
dataStream.filter { _ != 0 }

KeyBy = DataStream → KeyedStream	
#Logically partitions a stream into disjoint partitions, each partition containing elements of the same key. Internally, this is implemented with hash partitioning. See keys on how to specify keys. This transformation returns a KeyedStream.
#从datastream变成keyedstream，会将流中的数据进行分区，是根据key进行的hash分区（当然可以自定义partitionfunction）
dataStream.keyBy("someKey") // Key by field "someKey"
dataStream.keyBy(0) // Key by the first element of a Tuple

Reduce = KeyedStream → DataStream	
#A "rolling" reduce on a keyed data stream. Combines the current element with the last reduced value and emits the new value.
#
#A reduce function that creates a stream of partial sums:

keyedStream.reduce { _ + _ }

</p>
Fold
KeyedStream → DataStream	
A "rolling" fold on a keyed data stream with an initial value. Combines the current element with the last folded value and emits the new value. 

A fold function that, when applied on the sequence (1,2,3,4,5), emits the sequence "start-1", "start-1-2", "start-1-2-3", ...

val result: DataStream[String] =
keyedStream.fold("start")((str, i) => { str + "-" + i })

Aggregations
KeyedStream → DataStream	
Rolling aggregations on a keyed data stream. The difference between min and minBy is that min returns the minimum value, whereas minBy returns the element that has the minimum value in this field (same for max and maxBy).

keyedStream.sum(0)
keyedStream.sum("key")
keyedStream.min(0)
keyedStream.min("key")
keyedStream.max(0)
keyedStream.max("key")
keyedStream.minBy(0)
keyedStream.minBy("key")
keyedStream.maxBy(0)
keyedStream.maxBy("key")

Window
KeyedStream → WindowedStream	
Windows can be defined on already partitioned KeyedStreams. Windows group the data in each key according to some characteristic (e.g., the data that arrived within the last 5 seconds). See windows for a description of windows.

dataStream.keyBy(0).window(TumblingEventTimeWindows.of(Time.seconds(5))) // Last 5 seconds of data

WindowAll
DataStream → AllWindowedStream	
Windows can be defined on regular DataStreams. Windows group all the stream events according to some characteristic (e.g., the data that arrived within the last 5 seconds). See windows for a complete description of windows.

WARNING: This is in many cases a non-parallel transformation. All records will be gathered in one task for the windowAll operator.

dataStream.windowAll(TumblingEventTimeWindows.of(Time.seconds(5))) // Last 5 seconds of data

Window Apply
WindowedStream → DataStream
AllWindowedStream → DataStream	
Applies a general function to the window as a whole. Below is a function that manually sums the elements of a window.

Note: If you are using a windowAll transformation, you need to use an AllWindowFunction instead.

windowedStream.apply { WindowFunction }

// applying an AllWindowFunction on non-keyed window stream
allWindowedStream.apply { AllWindowFunction }


Window Reduce
WindowedStream → DataStream	
Applies a functional reduce function to the window and returns the reduced value.

windowedStream.reduce { _ + _ }

Window Fold
WindowedStream → DataStream	
Applies a functional fold function to the window and returns the folded value. The example function, when applied on the sequence (1,2,3,4,5), folds the sequence into the string "start-1-2-3-4-5":

val result: DataStream[String] =
windowedStream.fold("start", (str, i) => { str + "-" + i })

Aggregations on windows
WindowedStream → DataStream	
Aggregates the contents of a window. The difference between min and minBy is that min returns the minimum value, whereas minBy returns the element that has the minimum value in this field (same for max and maxBy).

windowedStream.sum(0)
windowedStream.sum("key")
windowedStream.min(0)
windowedStream.min("key")
windowedStream.max(0)
windowedStream.max("key")
windowedStream.minBy(0)
windowedStream.minBy("key")
windowedStream.maxBy(0)
windowedStream.maxBy("key")

Union
DataStream* → DataStream	
Union of two or more data streams creating a new stream containing all the elements from all the streams. Note: If you union a data stream with itself you will get each element twice in the resulting stream.

dataStream.union(otherStream1, otherStream2, ...)

Window Join
DataStream,DataStream → DataStream	
Join two data streams on a given key and a common window.

dataStream.join(otherStream)
.where(<key selector>).equalTo(<key selector>)
.window(TumblingEventTimeWindows.of(Time.seconds(3)))
.apply { ... }

Window CoGroup
DataStream,DataStream → DataStream	
Cogroups two data streams on a given key and a common window.

dataStream.coGroup(otherStream)
.where(0).equalTo(1)
.window(TumblingEventTimeWindows.of(Time.seconds(3)))
.apply {}

Connect
DataStream,DataStream → ConnectedStreams	
"Connects" two data streams retaining their types, allowing for shared state between the two streams.

someStream : DataStream[Int] = ...
otherStream : DataStream[String] = ...

val connectedStreams = someStream.connect(otherStream)

CoMap, CoFlatMap
ConnectedStreams → DataStream	
Similar to map and flatMap on a connected data stream

connectedStreams.map(
(_ : Int) => true,
(_ : String) => false
)
connectedStreams.flatMap(
(_ : Int) => true,
(_ : String) => false
)

Split
DataStream → SplitStream	
Split the stream into two or more streams according to some criterion.

val split = someDataStream.split(
(num: Int) =>
(num % 2) match {
case 0 => List("even")
case 1 => List("odd")
}
)

Select
SplitStream → DataStream	
Select one or more streams from a split stream.

val even = split select "even"
val odd = split select "odd"
val all = split.select("even","odd")

Iterate
DataStream → IterativeStream → DataStream	
Creates a "feedback" loop in the flow, by redirecting the output of one operator to some previous operator. This is especially useful for defining algorithms that continuously update a model. The following code starts with a stream and applies the iteration body continuously. Elements that are greater than 0 are sent back to the feedback channel, and the rest of the elements are forwarded downstream. See iterations for a complete description.

initialStream.iterate {
iteration => {
val iterationBody = iteration.map {/*do something*/}
(iterationBody.filter(_ > 0), iterationBody.filter(_ <= 0))
}
}

Extract Timestamps
DataStream → DataStream	
Extracts timestamps from records in order to work with windows that use event time semantics. See Event Time.

stream.assignTimestamps { timestampExtractor }